// <auto-generated />
using System;
using ClubService.Infrastructure.DbContexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace ClubService.Infrastructure.Migrations.ReadStore
{
    [DbContext(typeof(ReadStoreDbContext))]
    [Migration("20240709210752_InitialReadStore")]
    partial class InitialReadStore
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ClubService.Domain.ReadModel.AdminReadModel", b =>
                {
                    b.Property<Guid>("AdminId")
                        .HasColumnType("uuid")
                        .HasColumnName("adminId");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("status");

                    b.Property<Guid>("TennisClubId")
                        .HasColumnType("uuid")
                        .HasColumnName("tennisClubId");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("username");

                    b.HasKey("AdminId")
                        .HasName("pK_Admin");

                    b.ToTable("Admin", (string)null);
                });

            modelBuilder.Entity("ClubService.Domain.ReadModel.EmailMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("body");

                    b.Property<string>("RecipientEMailAddress")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("recipientEMailAddress");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("subject");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("timestamp");

                    b.HasKey("Id")
                        .HasName("pK_EmailOutbox");

                    b.ToTable("EmailOutbox", (string)null);
                });

            modelBuilder.Entity("ClubService.Domain.ReadModel.MemberReadModel", b =>
                {
                    b.Property<Guid>("MemberId")
                        .HasColumnType("uuid")
                        .HasColumnName("memberId");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("status");

                    b.Property<Guid>("TennisClubId")
                        .HasColumnType("uuid")
                        .HasColumnName("tennisClubId");

                    b.HasKey("MemberId")
                        .HasName("pK_Member");

                    b.ToTable("Member", (string)null);
                });

            modelBuilder.Entity("ClubService.Domain.ReadModel.ProcessedEvent", b =>
                {
                    b.Property<Guid>("EventId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("eventId");

                    b.HasKey("EventId")
                        .HasName("pK_ProcessedEvent");

                    b.ToTable("ProcessedEvent", (string)null);
                });

            modelBuilder.Entity("ClubService.Domain.ReadModel.SubscriptionTierReadModel", b =>
                {
                    b.Property<Guid>("SubscriptionTierId")
                        .HasColumnType("uuid")
                        .HasColumnName("subscriptionTierId");

                    b.Property<int>("MaxMemberCount")
                        .HasColumnType("integer")
                        .HasColumnName("maxMemberCount");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("SubscriptionTierId")
                        .HasName("pK_SubscriptionTier");

                    b.ToTable("SubscriptionTier", (string)null);
                });

            modelBuilder.Entity("ClubService.Domain.ReadModel.SystemOperatorReadModel", b =>
                {
                    b.Property<Guid>("SystemOperatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("systemOperatorId");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("username");

                    b.HasKey("SystemOperatorId")
                        .HasName("pK_SystemOperator");

                    b.ToTable("SystemOperator", (string)null);
                });

            modelBuilder.Entity("ClubService.Domain.ReadModel.TennisClubReadModel", b =>
                {
                    b.Property<Guid>("TennisClubId")
                        .HasColumnType("uuid")
                        .HasColumnName("tennisClubId");

                    b.Property<int>("MemberCount")
                        .HasColumnType("integer")
                        .HasColumnName("memberCount");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("status");

                    b.Property<Guid>("SubscriptionTierId")
                        .HasColumnType("uuid")
                        .HasColumnName("subscriptionTierId");

                    b.HasKey("TennisClubId")
                        .HasName("pK_TennisClub");

                    b.ToTable("TennisClub", (string)null);
                });

            modelBuilder.Entity("ClubService.Domain.ReadModel.TournamentReadModel", b =>
                {
                    b.Property<Guid>("TournamentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("tournamentId");

                    b.Property<DateOnly>("EndDate")
                        .HasColumnType("date")
                        .HasColumnName("endDate");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<DateOnly>("StartDate")
                        .HasColumnType("date")
                        .HasColumnName("startDate");

                    b.Property<Guid>("TennisClubId")
                        .HasColumnType("uuid")
                        .HasColumnName("tennisClubId");

                    b.HasKey("TournamentId")
                        .HasName("pK_Tournament");

                    b.ToTable("Tournament", (string)null);
                });

            modelBuilder.Entity("ClubService.Domain.ReadModel.AdminReadModel", b =>
                {
                    b.OwnsOne("ClubService.Domain.Model.ValueObject.FullName", "Name", b1 =>
                        {
                            b1.Property<Guid>("AdminReadModelAdminId")
                                .HasColumnType("uuid")
                                .HasColumnName("adminId");

                            b1.Property<string>("FirstName")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("FirstName");

                            b1.Property<string>("LastName")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("LastName");

                            b1.HasKey("AdminReadModelAdminId");

                            b1.ToTable("Admin");

                            b1.WithOwner()
                                .HasForeignKey("AdminReadModelAdminId")
                                .HasConstraintName("fK_Admin_Admin_adminId");
                        });

                    b.Navigation("Name")
                        .IsRequired();
                });

            modelBuilder.Entity("ClubService.Domain.ReadModel.MemberReadModel", b =>
                {
                    b.OwnsOne("ClubService.Domain.Model.ValueObject.FullName", "Name", b1 =>
                        {
                            b1.Property<Guid>("MemberReadModelMemberId")
                                .HasColumnType("uuid")
                                .HasColumnName("memberId");

                            b1.Property<string>("FirstName")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("FirstName");

                            b1.Property<string>("LastName")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("LastName");

                            b1.HasKey("MemberReadModelMemberId");

                            b1.ToTable("Member");

                            b1.WithOwner()
                                .HasForeignKey("MemberReadModelMemberId")
                                .HasConstraintName("fK_Member_Member_memberId");
                        });

                    b.Navigation("Name")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
